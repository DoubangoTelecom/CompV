/* Copyright (C) 2011-2020 Doubango Telecom <https://www.doubango.org>
* File author: Mamadou DIOP (Doubango Telecom, France).
* License: GPLv3. For commercial license please contact us.
* Source code: https://github.com/DoubangoTelecom/compv
* WebSite: http://compv.org
*/
#include "compv/base/compv_common.h"
#include "compv/base/compv_debug.h"

COMPV_NAMESPACE_BEGIN()

// Private function used as extern
COMPV_BASE_API const char* CompVGetErrorString(COMPV_ERROR_CODE code)
{
	switch (code) {
	case COMPV_ERROR_CODE_W_WINDOW_CLOSED: return "COMPV_ERROR_CODE_W_WINDOW_CLOSED";

	case COMPV_ERROR_CODE_E_NOT_IMPLEMENTED: return "COMPV_ERROR_CODE_E_NOT_IMPLEMENTED";
	case COMPV_ERROR_CODE_E_NOT_INITIALIZED: return "COMPV_ERROR_CODE_E_NOT_INITIALIZED";
	case COMPV_ERROR_CODE_E_NOT_FOUND: return "COMPV_ERROR_CODE_E_NOT_FOUND";
	case COMPV_ERROR_CODE_E_INVALID_CALL: return "COMPV_ERROR_CODE_E_INVALID_CALL";
	case COMPV_ERROR_CODE_E_INVALID_STATE: return "COMPV_ERROR_CODE_E_INVALID_STATE";
	case COMPV_ERROR_CODE_E_INVALID_PARAMETER: return "COMPV_ERROR_CODE_E_INVALID_PARAMETER";
	case COMPV_ERROR_CODE_E_INVALID_PIXEL_FORMAT: return "COMPV_ERROR_CODE_E_INVALID_PIXEL_FORMAT";
	case COMPV_ERROR_CODE_E_INVALID_IMAGE_FORMAT: return "COMPV_ERROR_CODE_E_INVALID_IMAGE_FORMAT";
	case COMPV_ERROR_CODE_E_INVALID_SUBTYPE: return "COMPV_ERROR_CODE_E_INVALID_SUBTYPE";
	case COMPV_ERROR_CODE_E_FAILED_TO_OPEN_FILE: return "COMPV_ERROR_CODE_E_FAILED_TO_OPEN_FILE";
	case COMPV_ERROR_CODE_E_FAILED_TO_READ_FILE: return "COMPV_ERROR_CODE_E_FAILED_TO_READ_FILE";
	case COMPV_ERROR_CODE_E_END_OF_FILE: return "COMPV_ERROR_CODE_E_END_OF_FILE";
	case COMPV_ERROR_CODE_E_OUT_OF_MEMORY: return "COMPV_ERROR_CODE_E_OUT_OF_MEMORY";
	case COMPV_ERROR_CODE_E_OUT_OF_BOUND: return "COMPV_ERROR_CODE_E_OUT_OF_BOUND";
	case COMPV_ERROR_CODE_E_DECODER_NOT_FOUND: return "COMPV_ERROR_CODE_E_DECODER_NOT_FOUND";
	case COMPV_ERROR_CODE_E_FILE_NOT_FOUND: return "COMPV_ERROR_CODE_E_FILE_NOT_FOUND";
	case COMPV_ERROR_CODE_E_TIMEDOUT: return "COMPV_ERROR_CODE_E_TIMEDOUT";
	case COMPV_ERROR_CODE_E_UNITTEST_FAILED: return "COMPV_ERROR_CODE_E_UNITTEST_FAILED";
	case COMPV_ERROR_CODE_E_SYSTEM: return "COMPV_ERROR_CODE_E_SYSTEM";
	case COMPV_ERROR_CODE_E_MEMORY_LEAK: return "COMPV_ERROR_CODE_E_MEMORY_LEAK";
	case COMPV_ERROR_CODE_E_MEMORY_NOT_ALIGNED: return "COMPV_ERROR_CODE_E_MEMORY_NOT_ALIGNED";
	case COMPV_ERROR_CODE_E_THIRD_PARTY_LIB: return "COMPV_ERROR_CODE_E_THIRD_PARTY_LIB";
	case COMPV_ERROR_CODE_E_PTHREAD: return "COMPV_ERROR_CODE_E_PTHREAD";
	case COMPV_ERROR_CODE_E_THREAD_FORKING: return "COMPV_ERROR_CODE_E_THREAD_FORKING";
	case COMPV_ERROR_CODE_E_JNI: return "COMPV_ERROR_CODE_E_JNI";
	case COMPV_ERROR_CODE_E_DIRECTSHOW: return "COMPV_ERROR_CODE_E_DIRECTSHOW";
	case COMPV_ERROR_CODE_E_MFOUNDATION: return "COMPV_ERROR_CODE_E_MFOUNDATION";
	case COMPV_ERROR_CODE_E_EGL: return "COMPV_ERROR_CODE_E_EGL";
	case COMPV_ERROR_CODE_E_GL: return "COMPV_ERROR_CODE_E_GL";
	case COMPV_ERROR_CODE_E_GL_NO_CONTEXT: return "COMPV_ERROR_CODE_E_GL_NO_CONTEXT";
	case COMPV_ERROR_CODE_E_GLEW: return "COMPV_ERROR_CODE_E_GLEW";
	case COMPV_ERROR_CODE_E_GLFW: return "COMPV_ERROR_CODE_E_GLFW";
	case COMPV_ERROR_CODE_E_SDL: return "COMPV_ERROR_CODE_E_SDL";
	case COMPV_ERROR_CODE_E_SKIA: return "COMPV_ERROR_CODE_E_SKIA";
	case COMPV_ERROR_CODE_E_INTEL_IPP: return "COMPV_ERROR_CODE_E_INTEL_IPP";
	case COMPV_ERROR_CODE_E_INTEL_TBB: return "COMPV_ERROR_CODE_E_INTEL_TBB";
	case COMPV_ERROR_CODE_E_FFMPEG: return "COMPV_ERROR_CODE_E_FFMPEG";
	case COMPV_ERROR_CODE_E_FREETYPE: return "COMPV_ERROR_CODE_E_FREETYPE";
	case COMPV_ERROR_CODE_E_STBI: return "COMPV_ERROR_CODE_E_STBI";
	case COMPV_ERROR_CODE_E_JSON_CPP: return "COMPV_ERROR_CODE_E_JSON_CPP";
	case COMPV_ERROR_CODE_E_ZLIB: return "COMPV_ERROR_CODE_E_ZLIB";
	case COMPV_ERROR_CODE_E_LIBSVM: return "COMPV_ERROR_CODE_E_LIBSVM";
	case COMPV_ERROR_CODE_E_PUGIXML: return "COMPV_ERROR_CODE_E_PUGIXML";

	default: return "COMPV_ERROR_CODE_E_UNKNOWN";
	}
}

// Private function used as extern
COMPV_BASE_API const char* CompVGetSubtypeString(COMPV_SUBTYPE subtype)
{
	switch (subtype) {
	case COMPV_SUBTYPE_NONE: return "COMPV_SUBTYPE_NONE";
	case COMPV_SUBTYPE_RAW_OPAQUE: return "COMPV_SUBTYPE_RAW_OPAQUE";
	case COMPV_SUBTYPE_RAW_INT8: return "COMPV_SUBTYPE_RAW_INT8";
	case COMPV_SUBTYPE_RAW_UINT8: return "COMPV_SUBTYPE_RAW_UINT8";
	case COMPV_SUBTYPE_RAW_INT16: return "COMPV_SUBTYPE_RAW_INT16";
	case COMPV_SUBTYPE_RAW_UINT16: return "COMPV_SUBTYPE_UINT16";
	case COMPV_SUBTYPE_RAW_INT32: return "COMPV_SUBTYPE_RAW_INT32";
	case COMPV_SUBTYPE_RAW_UINT32: return "COMPV_SUBTYPE_UINT32";
	case COMPV_SUBTYPE_RAW_SIZE: return "COMPV_SUBTYPE_RAW_SIZE";
	case COMPV_SUBTYPE_RAW_FLOAT32: return "COMPV_SUBTYPE_FLOAT32";
	case COMPV_SUBTYPE_RAW_FLOAT64: return "COMPV_SUBTYPE_FLOAT64";
	case COMPV_SUBTYPE_RAW_USCALAR: return "COMPV_SUBTYPE_RAW_USCALAR";
	case COMPV_SUBTYPE_RAW_SCALAR: return "COMPV_SUBTYPE_RAW_SCALAR";
	case COMPV_SUBTYPE_PIXELS_RGB24: return "COMPV_SUBTYPE_PIXELS_RGB24";
	case COMPV_SUBTYPE_PIXELS_BGR24: return "COMPV_SUBTYPE_PIXELS_BGR24";
	case COMPV_SUBTYPE_PIXELS_RGBA32: return "COMPV_SUBTYPE_PIXELS_RGBA32";
	case COMPV_SUBTYPE_PIXELS_BGRA32: return "COMPV_SUBTYPE_PIXELS_BGRA32";
	case COMPV_SUBTYPE_PIXELS_ABGR32: return "COMPV_SUBTYPE_PIXELS_ABGR32";
	case COMPV_SUBTYPE_PIXELS_ARGB32: return "COMPV_SUBTYPE_PIXELS_ARGB32";
	case COMPV_SUBTYPE_PIXELS_RGB565LE: return "COMPV_SUBTYPE_PIXELS_RGB565LE";
	case COMPV_SUBTYPE_PIXELS_RGB565BE: return "COMPV_SUBTYPE_PIXELS_RGB565BE";
	case COMPV_SUBTYPE_PIXELS_BGR565LE: return "COMPV_SUBTYPE_PIXELS_BGR565LE";
	case COMPV_SUBTYPE_PIXELS_BGR565BE: return "COMPV_SUBTYPE_PIXELS_BGR565BE";
	case COMPV_SUBTYPE_PIXELS_HSV: return "COMPV_SUBTYPE_PIXELS_HSV";
	case COMPV_SUBTYPE_PIXELS_HSL: return "COMPV_SUBTYPE_PIXELS_HSL";
	case COMPV_SUBTYPE_PIXELS_Y: return "COMPV_SUBTYPE_PIXELS_Y";
	case COMPV_SUBTYPE_PIXELS_NV12: return "COMPV_SUBTYPE_PIXELS_NV12";
	case COMPV_SUBTYPE_PIXELS_NV21: return "COMPV_SUBTYPE_PIXELS_NV21";
	case COMPV_SUBTYPE_PIXELS_YUV420P: return "COMPV_SUBTYPE_PIXELS_YUV420P";
	case COMPV_SUBTYPE_PIXELS_YVU420P: return "COMPV_SUBTYPE_PIXELS_YVU420P";
	case COMPV_SUBTYPE_PIXELS_YUV422P: return "COMPV_SUBTYPE_PIXELS_YUV422P";
	case COMPV_SUBTYPE_PIXELS_YUYV422: return "COMPV_SUBTYPE_PIXELS_YUYV422";
	case COMPV_SUBTYPE_PIXELS_UYVY422: return "COMPV_SUBTYPE_PIXELS_UYVY422";
	case COMPV_SUBTYPE_PIXELS_YUV444P: return "COMPV_SUBTYPE_PIXELS_YUV444P";

	default: return "COMPV_SUBTYPE_PIXELS_UNKNOWN";
	}
}

COMPV_NAMESPACE_END()
